<assertions>
  <assertion id="1" tag="ref:XSH6:33401:33405">
   The function
   int pthread_key_create(pthread_key_t *key, void (*destructor(void*));

   shall create a thread-specific data key visible to all threaads in the process.  Key values
   provided by pthread_key_create() are opaque objects used to locate thread-specific data.
   Although the same key value may be used by different threads, the values bound to the key
   by pthread_setspecific() are maintained on a per-thread basis and persist for the life of
   the calling thread.
  </assertion>

  <assertion id="2" tag="ref:XSH6:33406:33408">
  Upon key creation, the value NULL shall be associated with the new key in all active threads.
  Upon thread creation, the value NULL shall be associated with all defined keys in the new
  thread.
  </assertion>

  <assertion id="3" tag="ref:XSH6:33409:33413">
  An optional destructor function may be associated with each key value.  At thread exit, if
  a key value has a non-NULL destructor pointer, and the thread has a non-NULL value associated
  with that key, the value of the key is set to NULL, and then the function pointed to is called
  with the previously associated value as its sole argument.  The order of destructor calls is
  unspecified if more than one destructor exists for a thread when it exits.
  </assertion>

  <assertion id="4" tag="ref:XSH6:33414:33420">
  If, after all the destructors have been called for all non-NULL values with associated
  destructors, there are still some non-NULL values with associated destructors, then the
  process is repeated.  If, after at least (PTHREAD_DESTRUCTOR_ITERATIONS) iterations of
  destructor calls for outstanding non-NULL values, there are still some non-NULL values with
  associated destructors, implemenations may stop calling destructors or they may continue
  calling destructors until no non-NULL values with associated destructors exist, even though
  this might result in an infinite loop.
  </assertion>

  <assertion id="5" tag="ref:XSH6:33422:33423">
  If successful, the pthread_key_create() function shall store the newly created key value
  at *key and shall return zero.  Otherwise, an error number shall be returned to indicate
  an error:

  It shall fail if:
  [EAGAIN] - the system lacked the necessary resources to create another thread_specific
             data key, or the system imposed limit on the total number of keys per process
             [PTHREAD_KEYS_MAX] has been exceeded.

  [ENOMEM] - insufficient memory exists to create the key.

  it shall not return [EINTR].
  </assertion>

</assertions>
