#!/bin/sh

################################################################################
##                                                                            ##
## Copyright (c) International Business Machines  Corp., 2006                 ##
##                                                                            ##
## This program is free software;  you can redistribute it and#or modify      ##
## it under the terms of the GNU General Public License as published by       ##
## the Free Software Foundation; either version 2 of the License, or          ##
## (at your option) any later version.                                        ##
##                                                                            ##
## This program is distributed in the hope that it will be useful, but        ##
## WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY ##
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License   ##
## for more details.                                                          ##
##                                                                            ##
## You should have received a copy of the GNU General Public License          ##
## along with this program;  if not, write to the Free Software               ##
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA    ##
##                                                                            ##
##                                                                            ##
################################################################################
#
# File:
#   mcast6-pktfld02
#
# Description:
#   Verify that the kernel is not crashed when joining plural IPv6 multicast
#   groups on separate sockets, then receiving a large number of UDP packets at
#   the each socket
#
# Setup:
#   See ltp-yyyymmdd/testcases/network/stress/README
#
# Author:
#   Mitsuru Chinen <mitch@jp.ibm.com>
#
# History:
#	May 1 2006 - Created (Mitsuru Chinen)
#
#-----------------------------------------------------------------------
# Uncomment line below for debug output.
#trace_logic=${trace_logic:-"set -x"}
$trace_logic

# The test case ID, the test case count and the total number of test case
TCID=mcast6-pktfld02
TST_TOTAL=1
TST_COUNT=1
export TCID
export TST_COUNT
export TST_TOTAL

LTPROOT=${LTPROOT:-`(cd ../../../../.. ; pwd)`}
export LTPROOT

# Check the environmanet variable
. check_envval || exit $TST_TOTAL

# Dulation of the test [sec]
NS_DURATION=${NS_DURATION:-3600}      # 1 hour

# The number of the test link where tests run
LINK_NUM=${LINK_NUM:-0}

# Network portion of the IPv6 address
NETWORK_PART="fec0:1:1:1"

# Host portion of the IPv6 address
LHOST_HOST_PART=":2"	# local host
RHOST_HOST_PART=":1"	# remote host

# Prefix of the multicast address
MCAST_ADDR_PREFIX=ff0e::1111

# Number of the multicast connection
MCASTNUM_NORMAL=${MCASTNUM_NORMAL:-20}


#-----------------------------------------------------------------------
#
# Function: do_cleanup
#
# Description:
#   Recover the system configuration
#
#-----------------------------------------------------------------------
do_cleanup()
{
    # Make sure to kill the multicast receiver and sender
    killall -SIGHUP ns-mcast_receiver >/dev/null 2>&1
    $LTP_RSH $RHOST killall -SIGHUP ns-udpsender >/dev/null 2>&1

    # Clean up each interface
    initialize_if lhost ${LINK_NUM}
    initialize_if rhost ${LINK_NUM}
}


#-----------------------------------------------------------------------
#
# Function: do_setup
#
# Description:
#   Configure the ssystem for the test
#
#-----------------------------------------------------------------------
do_setup()
{
    # Initialize the system configuration
    do_cleanup

    # Call do_cleanup function before exit
    trap do_cleanup 0

    # Unset the maximum number of processes
    ulimit -u unlimited

    # name of interface of the local/remote host
    lhost_ifname=`get_ifname lhost $LINK_NUM`
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to get the interface name at the local host"
	exit $TST_TOTAL
    fi

    rhost_ifname=`get_ifname rhost $LINK_NUM`
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to get the interface name at the remote host"
	exit $TST_TOTAL
    fi

    # Set IPv6 addresses to the interfaces
    add_ipv6addr lhost $LINK_NUM $NETWORK_PART $LHOST_HOST_PART
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to add any IP address at the local host"
	exit 1
    fi

    add_ipv6addr rhost $LINK_NUM $NETWORK_PART $RHOST_HOST_PART
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to add any IP address at the remote host"
	exit 1
    fi

    # IPv6 address of the local/remote host
    lhost_addr="${NETWORK_PART}:${LHOST_HOST_PART}"
    rhost_addr="${NETWORK_PART}:${RHOST_HOST_PART}"

    # Make sure the connectvity
    check_icmpv6_connectivity $lhost_ifname $rhost_addr
    if [ $? -ne 0 ]; then
	tst_resm TBROK "There is no IPv6 connectivity."
	exit 1
    fi

    # Make sure the sysctl values
    sysctl -w net.ipv6.conf.all.force_mld_version=0 >/dev/null
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to set the sysctl value regarding multicast"
	exit $TST_TOTAL
    fi

    sysctl -w net.ipv6.conf.${lhost_ifname}.force_mld_version=0 >/dev/null
    sysctl -w net.ipv6.mld_max_msf=10 >/dev/null
}


#-----------------------------------------------------------------------
#
# Main
#
#

# Test description
tst_resm TINFO "Verify that the kernel is not crashed when joining $MCASTNUM_NORMAL IPv6 multicast groups on separate sockets, then receiving a large number of UDP packets at the each socket in $NS_DURATION [sec]"

# Make sure the value of LTPROOT
do_setup

mcastnum=0
mcast_port_range=`find_portbundle udp 1025 $MCASTNUM_NORMAL`
if [ $? -ne 0 ]; then
    tst_resm TBROK "Failed to get enough port"
    exit 1
fi
mcast_port_top=`echo $mcast_port_range | cut -f 1 -d '-'`

while [ $mcastnum -lt $MCASTNUM_NORMAL ]; do
    # Define the multicast address
    if [ $mcastnum -gt 65535 ]; then
	tst_resm TINFO "The number of the connection is less than 65535"
	break
    fi
    mcastnum_hex=`printf "%x" $mcastnum`
    mcast_addr=${MCAST_ADDR_PREFIX}:${mcastnum_hex}

    # Run a receiver
    mcast_port=`expr $mcast_port_top + $mcastnum`
    ns-mcast_receiver -f 6 -I $lhost_ifname -m $mcast_addr -p $mcast_port -b
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to start multicast receiver"
	exit 1
    fi

    # Run a sender
    $LTP_RSH $RHOST ${LTPROOT}/testcases/bin/ns-udpsender -D $mcast_addr -f 6 -p $mcast_port -m -I $rhost_ifname -b -t $NS_DURATION

    mcastnum=`expr $mcastnum + 1`
done

sleep $NS_DURATION
do_cleanup

#-----------------------------------------------------------------------
#
# Clean up
#

tst_resm TPASS "Test is finished successfully."
exit 0
